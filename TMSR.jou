#!python
# Script to create a mesh of the TMSR core with variable model parameters. This model currently only
# allows single-layer spheres (i.e. the spheres are homogeneous). Meshing and importing the pebbles are optional.
# All volumes are meshed using tetmesh. 
# "______" indicates that a user-defined value is input on this line. 

import math
import numpy as np

# DELETE ANY EXISTING GEOMETRIES ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

number_to_delete = 15		# ______ number of volumes to delete before build. No volumes should already exist. 
for i in range (0,number_to_delete):
    cubit.cmd('split body ' + str(i))
    cubit.cmd('delete volume ' + str(i))
print('Deleted all existing volumes.')


# USER INPUT ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

# Outermost cylinder
cyl1_h = 3.064			# ______ height (m)
cyl1_r = 2.85/2			# ______ radius (m)

# Innermost Cylinder
cyl2_h = cyl1_h		# height (same as outermost cylinder) (m)
cyl2_r = 0.75/2			# ______ radius (only important for angled core inlet/outlet) (m)

# Middle cylinder
cyl3_h = cyl1_h		# height (same as outermost cylinder) (m)
cyl3_r = 1.35/2			# ______ radius (m)

# Cone angles
theta1 = 0			# ______ top angle (degrees) [measured from the horizontal]
theta2 = 0			# ______ bottom angle (degrees) [measured from the horizontal]

# Core
core_h = (205.7/306.4)*cyl1_h	# ______ core height (including angled portions, if any) (m)
active_h = 92.85/205.7		# ______ bottom boundary of fuel region of core expressed as a fraction of total core height (core_h) 
#			                (0 = very top of core, 1 = very bottom of core). For now this cannot be equal to 1.0. 

# File location with pebble coordinate data
import_pebbles = True		# ______ Boolean to optionally import pebbles
data = np.loadtxt('/Users/aprilnovak/Documents/Meshes_Backup/Pebble_Coordinate_Data/shake_partial.inp')	# ______ Pebble coordinate data text file
x = data[:,0]			# ______ Column containing x-coordinates (cm)
y = data[:,1]			# ______ Column containing y-coordinates (cm)
z = data[:,2]			# ______ Column containing z-coordinates (cm)
r = data[:,3]			# ______ Column containing radius lengths (cm)

# Mesh geometry (1 = fine, 2+ = very fine - enter "0" if you want to use standard mesh)
mesh_volumes = False		# ______ Boolean to optionally mesh volumes
pebble_refine = 0		# ______ Pebble mesh refinement parameter
fluid_active_refine = 0		# ______ Fluid mesh refinement parameter (in the active region)
fluid_inactive_refine = 1		# ______ Fluid mesh refinement parameter (in the pure flibe region)
reflector_refine = 1		# ______ Upper and lower reflector mesh refinement parameter
outer_reflector_refine = 1		# ______ Outer reflector mesh refinement parameter


# GEOMETRICAL CALCULATION  ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

# Calculate heights associated with the cones
cone1_h = cyl3_r*math.tan(math.radians(theta1))
cone1_h_exp = (cyl3_r-cyl2_r)*math.tan(math.radians(theta1))
cone2_h = cyl3_r*math.tan(math.radians(theta2))
cone2_h_exp = (cyl3_r-cyl2_r)*math.tan(math.radians(theta2))
core_straight_h = core_h - cone1_h_exp - cone2_h_exp

# Checks if angles are too large (i.e. there is no "flat face" to the core)
if ((cone1_h_exp+cone2_h_exp)>core_h):
    print('Angles are too large to create the angled edges. Choose smaller angles.')
    print('You have entered theta1 = ' + str(theta1) + ' and theta2 = ' + str(theta2))
else:
    if (theta1==0 or theta2==0):
        cubit.cmd('Cylinder height ' + str(cyl1_h) + ' radius ' + str(cyl1_r))
        if (theta1==0 and theta2==0):
            if (active_h != 1.0):
                flag = "Simple_TMSR_Benchmark"
                # TMSR Benchmark with flat-angled core and some height of the core being purely flibe. 
                cubit.cmd('Cylinder height ' + str(active_h*core_h) + ' radius ' + str(cyl3_r))
                cubit.cmd('Cylinder height ' + str((1-active_h)*core_h) + ' radius ' + str(cyl3_r))
                cubit.cmd('Cylinder height ' + str((cyl1_h-core_h)/2) + ' radius ' + str(cyl3_r))
                cubit.cmd('Cylinder height ' + str((cyl1_h-core_h)/2) + ' radius ' + str(cyl3_r))
                #
                ##### Compress all to 1 (outer cylinder), 2 (active region), 3 (inactive region), 4 (top reflector), 5 (lower reflector) #####
                cubit.cmd('Compress all')
                existing_volumes = 5
                cubit.cmd('move Volume 4 location 0 0 ' + str(cyl1_h/2 - 0.5*(cyl1_h-core_h)/2))
                cubit.cmd('move Volume 5 location 0 0 ' + str(-1*cyl1_h/2 + 0.5*(cyl1_h-core_h)/2))
                cubit.cmd('move Volume 2 location 0 0 ' + str(-1*cyl1_h/2 + 0.5*active_h*core_h + (cyl1_h-core_h)/2 + (1-active_h)*core_h))
                cubit.cmd('move Volume 3 location 0 0 ' + str(-1*cyl1_h/2 + 0.5*(1-active_h)*core_h + (cyl1_h-core_h)/2))
                #
                # Ensure outer reflector doesn't overlap core innards
                for i in range (2,existing_volumes+1):
                    cubit.cmd('body ' + str(i) + ' copy move 0 0 0')
                cubit.cmd('unite body 6 7 8 9')
                cubit.cmd('subtract body 6 from body 1')
            else:
                cubit.cmd('Cylinder height ' + str(active_h*core_h) + ' radius ' + str(cyl3_r))
                cubit.cmd('Cylinder height ' + str((cyl1_h-core_h)/2) + ' radius ' + str(cyl3_r))
                cubit.cmd('Cylinder height ' + str((cyl1_h-core_h)/2) + ' radius ' + str(cyl3_r))
                #
                ###### Compress all to 1 (outer cylinder), 2 (active region), 3 (top reflector), 4 (bottom reflector) #####
                cubit.cmd('Compress all')
                existing_volumes = 4
                cubit.cmd('move Volume 3 location 0 0 ' + str(cyl1_h/2 - 0.5*(cyl1_h-core_h)/2))
                cubit.cmd('move Volume 4 location 0 0 ' + str(-1*cyl1_h/2 + 0.5*(cyl1_h-core_h)/2))
                cubit.cmd('move Volume 2 location 0 0 ' + str(-1*cyl1_h/2 + 0.5*active_h*core_h + (cyl1_h-core_h)/2 + (1-active_h)*core_h))
                print('Capability not yet implemented for importing pebbles with a full active region')
        else:
            print('Capability not currently implemented for one angled edge and one flat edge to the core region.')
    else:
        flag = "Angled_TMSR_Benchmark"
        ##### Create elements #####
        cubit.cmd('Cylinder height ' + str(cyl1_h) + ' radius ' + str(cyl1_r))
        cubit.cmd('Cylinder height ' + str(cyl2_h) + ' radius ' + str(cyl2_r))
        cubit.cmd('create frustum height ' + str(cone1_h) + ' radius ' + str(cyl3_r) + ' top 0')
        cubit.cmd('create frustum height ' + str(cone2_h) + ' radius ' + str(cyl3_r) + ' top 0')
        cubit.cmd('Create cylinder height ' + str(core_straight_h) + ' radius ' + str(cyl3_r))
        #
        ##### Assemble geometry #####
        cubit.cmd('compress all')
        cone1_base = cyl1_h/2 - ((cyl1_h-core_h)/2) - cone1_h_exp
        cone1_mid = cone1_base + cone1_h/2
        cone2_base = -1*(cyl1_h/2 - ((cyl1_h-core_h)/2) - cone2_h_exp)
        cone2_mid = cone2_base - cone2_h/2
        core_center = (cone2_h_exp - cone1_h_exp)	
        cubit.cmd('move Volume 3 location 0 0 ' + str(cone1_mid))
        cubit.cmd('Volume 4 reflect Z')
        cubit.cmd('move Volume 4 location 0 0 ' + str(cone2_mid))
        cubit.cmd('move Volume 5 location 0 0 ' + str(core_center/2))
        cubit.cmd('unite body 5 4 3 2')
        cubit.cmd('body 5 copy move 0 0 0')
        #
        ###### Divide the core into active and not active regions #####
        cubit.cmd('Cylinder height ' + str(cyl1_h) + ' radius ' + str(cyl3_r))
        cubit.cmd('move Volume 7 location 0 0 ' + str(cyl1_h/2 + -1*cyl1_h/2 + (cyl1_h - core_h)/2 + (1-active_h)*core_h))
        cubit.cmd('Cylinder height ' + str(cyl1_h) + ' radius ' + str(cyl3_r))
        cubit.cmd('move Volume 8 location 0 0 ' + str(-1*(cyl1_h/2 +  -1*cyl1_h/2 + (cyl1_h - core_h)/2 + active_h*core_h)))
        cubit.cmd('intersect body 5 7')
        cubit.cmd('intersect body 6 8')
        #
        ##### Divide the inlet and outlet smaller sections into their own materials #####
        height = 2.0 # extra height added to subtracted cylinders to make sure cone tips are cut off
        cubit.cmd('Cylinder height ' + str((cyl1_h-core_h)/2+height) + ' radius ' + str(cyl2_r))
        cubit.cmd('move Volume 9 location 0 0 ' + str(core_h/2 + (cyl1_h-core_h)/4+height/2))
        cubit.cmd('Cylinder height ' + str((cyl1_h-core_h)/2) + ' radius ' + str(cyl2_r))
        cubit.cmd('move Volume 10 location 0 0 ' + str(core_h/2 + (cyl1_h-core_h)/4))
        cubit.cmd('Cylinder height ' + str((cyl1_h-core_h)/2 + height) + ' radius ' + str(cyl2_r))
        cubit.cmd('move Volume 11 location 0 0 ' + str(-1*(core_h/2 + (cyl1_h-core_h)/4 + height/2)))
        cubit.cmd('Cylinder height ' + str((cyl1_h-core_h)/2) + ' radius ' + str(cyl2_r))
        cubit.cmd('move Volume 12 location 0 0 ' + str(-1*(core_h/2 + (cyl1_h-core_h)/4)))
        cubit.cmd('subtract body 9 from body 7')
        cubit.cmd('subtract body 11 from body 8')
        #
        ##### Compress all to volumes 1 (outer cylinder), 2 (active region), 3 (inactive region), 4 (top reflector), 5 (bottom reflector) #####
        existing_volumes = 5
        cubit.cmd('Compress all')
        #
        # Ensure outer reflector doesn't overlap core innards
        for i in range (2,existing_volumes+1):
            cubit.cmd('body ' + str(i) + ' copy move 0 0 0')
        cubit.cmd('unite body 6 7 8 9')
        cubit.cmd('subtract body 6 from body 1')
#


# IMPORT PEBBLES ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
cut = []
cutcount = []

if (import_pebbles == True):
    num_pebbles = len(x)
    count = 0
    for i in range (0,num_pebbles):
        cubit.cmd('create sphere radius ' + str(r[i]/100))
        cubit.cmd('Compress all')
        cubit.cmd('move Volume ' + str(i+1+existing_volumes + count) + ' location ' + str(x[i]/100) + ' ' + str(y[i]/100) + ' ' + str(z[i]/100))
        # 
        # Cut pebbles that exceed the vertical section of the active region
        if (z[i]/100) < (0.5*core_straight_h - r[i]/200): # proceed as normally
            if ((x[i]*x[i] + y[i]*y[i]) > (cyl3_r*100 - 3)*(cyl3_r*100 - 3)):
                cubit.cmd('Cylinder height ' + str(cyl1_h) + ' radius ' + str(cyl3_r))
                count = count + 1
                cut.append(i) # contains the indices of which pebbles intersect the surface
                cutcount.append(count) # contains the number of pebbles cut
        #elif (z[i]/100 > (0.5*core_straight_h + cone1_h_exp
        #
        # Cut pebbles that exceed the angled section of the active region (depends on the cone angles)
#
# Cut pebbles that intersect the azimuthal surface of the active region
    for i in range (0,len(cut)):
        cubit.cmd('intersect body ' + str(cut[i] + 1 + existing_volumes + cutcount[i]) + ' ' + str(cut[i] + 1 + existing_volumes + cutcount[i] - 1))
#
# Copy each pebble.
    for i in range (1, len(x) + 2):
        cubit.cmd('body ' + str(i + existing_volumes) + ' copy move 0 0 0') 
#
    last_vol = len(x) + (1 + len(x) + len(cut) + existing_volumes)
# Subtract all spheres from body 2 (active region)
    string = ' '
    for i in range (1 + len(x) + len(cut)+ existing_volumes, last_vol):
        string = string + str(i) + ' '
    cubit.cmd('subtract body ' + str(string) + ' from body 2')
#


# MESH VOLUMES ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

if (mesh_volumes==True):
    for i in range (1, last_vol + 1):
        cubit.cmd('Volume ' + str(i) + ' scheme Tetmesh')
        cubit.cmd('set tetmesher interior points on')
        cubit.cmd('set tetmesher optimize level 3 overconstrained off sliver off')
        cubit.cmd('set tetmesher boundary recovery off')
        cubit.cmd('volume ' + str(i) + ' tetmesh growth_factor 1.0')
        cubit.cmd('mesh Volume ' + str(i))
        #
        # Refine pebble meshing
        if (( i > existing_volumes ) and ( i < last_vol ) and (pebble_refine != 0)):
            cubit.cmd('refine volume ' + str(i) + ' numsplit ' + str(pebble_refine) + ' bias 1.0 depth 1 smooth')
        if (( i == last_vol ) and (fluid_active_refine != 0)):
            cubit.cmd('refine volume ' + str(i) + ' numsplit ' + str(fluid_active_refine) + ' bias 1.0 depth 1 smooth')
        if (((i == 4) or (i == 5)) and (reflector_refine != 0)):
            cubit.cmd('refine volume ' + str(i) + ' numsplit ' + str(reflector_refine) + ' bias 1.0 depth 1 smooth')
        if ((i == 1) and (outer_reflector_refine !=0)):
            cubit.cmd('refine volume ' + str(i) + ' numsplit ' + str(outer_reflector_refine) + ' bias 1.0 depth 1 smooth')
#
# Rename Volumes (except pebbles)
#cubit.cmd('volume 1 name "Outer Reflector"')
#cubit.cmd('volume 3 name "Inactive Region"')
#cubit.cmd('volume 4 name "Upper Reflector"')
#cubit.cmd('volume 5 name "Lower Reflector"')
#if (flag != "Angled_TMSR_Benchmark"):
#    cubit.cmd('volume ' + str(last_vol) + ' name "Active Region"')
#else:
#   cubit.cmd('volume 2 name "Active Region"')
print(core_straight_h)
print(z)




